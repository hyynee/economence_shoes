generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  account_id   Int            @id @default(autoincrement())
  full_name    String         @db.VarChar(45)
  email        String         @db.VarChar(45)
  password     String         @db.VarChar(255)
  role_id      String         @db.VarChar(45)
  role         role           @relation(fields: [role_id], references: [role_id], onDelete: Cascade, map: "role_id")
  bill         bill[]
  goodsreceipt goodsreceipt[]
  order        order[]
  cart         cart[]
  invoices     Invoice[]

  @@index([role_id], map: "role_id_idx")
}

model bill {
  bill_id          Int      @id
  account_id       Int
  date             DateTime @db.Date
  total_price      Int
  address          String   @db.VarChar(45)
  customer_id      Int
  discount_code    String   @db.VarChar(45)
  discounted_price String?  @db.VarChar(45)
  account          account  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "account_id")
  customer         customer @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade, map: "customer_id")
  discount         discount @relation(fields: [discount_code], references: [discount_code], onDelete: Cascade, map: "discoutn_code")

  @@index([account_id], map: "account_id_idx")
  @@index([customer_id], map: "customer_id_idx")
  @@index([discount_code], map: "discoutn_code_idx")
}

model brand {
  brand_id   Int       @id @default(autoincrement())
  brand_name String    @db.VarChar(45)
  product    product[]
}

model category {
  category_id   Int       @id @default(autoincrement())
  category_name String    @db.VarChar(45)
  product       product[]
}

model customer {
  customer_id   Int    @id @default(autoincrement())
  customer_name String @db.VarChar(45)
  phone_number  String
  bill          bill[]
}

model cart {
  cart_id    Int @id @default(autoincrement())
  account_id Int
  product_id Int
  quantity   Int
  price      Int

  account account @relation(fields: [account_id], references: [account_id], onDelete: Cascade)
  product product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@unique([account_id, product_id])
  @@index([account_id], map: "account_id_idx")
  @@index([product_id], map: "product_id_idx")
}

model discount {
  discount_code String   @id @db.VarChar(45)
  condition     String   @db.VarChar(45)
  discount      String   @db.VarChar(45)
  start_date    DateTime @db.Date
  end_date      DateTime @db.Date
  active        String   @db.VarChar(45)
  bill          bill[]
}

model order {
  order_id          Int          @id @default(autoincrement())
  account_id        Int
  stripe_session_id String?
  order_date        DateTime     @default(now())
  total_price       Int
  delivery_status   String       @default("pending") @db.VarChar(45)
  payment_status    String       @db.VarChar(45)
  account           account      @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "order_account_id")
  order_items       order_item[]
  shipping_address  String

  @@index([account_id], map: "account_id_idx")
}

model order_item {
  order_item_id Int @id @default(autoincrement())
  order_id      Int
  product_id    Int
  quantity      Int
  price         Int

  order   order   @relation(fields: [order_id], references: [order_id], onDelete: Cascade, map: "order_order_id")
  product product @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "order_item_product_id")

  @@index([order_id])
  @@index([product_id])
}

model goodsreceipt {
  receipt_id          Int                   @id @default(autoincrement())
  goodsreceipt_name   String                @db.VarChar(45)
  date                DateTime              @db.Date
  total_price         Int
  supplier_id         Int
  account_id          Int
  account             account               @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "fk_goodsreceipt_account_id")
  supplier            supplier              @relation(fields: [supplier_id], references: [supplier_id], onDelete: Cascade, map: "fk_goodsreceipt_supplier_id")
  goodsreceipt_detail goodsreceipt_detail[]

  @@index([account_id])
  @@index([supplier_id])
}

model goodsreceipt_detail {
  receiptdetail_id Int          @id @default(autoincrement())
  product_id       Int
  quantity         Int
  receipt_id       Int
  input_price      Int
  product          product      @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "fk_goodsreceipt_detail_product_id")
  goodsreceipt     goodsreceipt @relation(fields: [receipt_id], references: [receipt_id], onDelete: Cascade, map: "fk_goodsreceipt_detail_receipt_id")

  @@index([product_id])
  @@index([receipt_id])
}

model ResetToken {
  id         String   @id @default(uuid())
  token      String   @unique
  userId     Int
  expiryDate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model khuyenmai {
  STT       Int      @id
  TEN       String   @db.VarChar(45)
  MA        String   @db.VarChar(45)
  DIEUKIEN  String   @db.VarChar(45)
  GIAMGIA   String   @db.VarChar(45)
  NGAYBD    DateTime @db.Date
  NGAYKT    DateTime @db.Date
  TRANGTHAI String   @db.VarChar(45)
}

model product {
  product_id          Int                   @id @default(autoincrement())
  category_id         Int
  brand_id            Int
  product_name        String                @db.VarChar(45)
  output_price        Int
  input_price         Int
  country             String                @db.VarChar(45)
  year_of_product     Int
  discount_percent    Int
  quantity            Int                   @default(0)
  image_path          String                @db.VarChar(255)
  goodsreceipt_detail goodsreceipt_detail[]
  brand               brand                 @relation(fields: [brand_id], references: [brand_id], onDelete: Cascade, map: "brand_id")
  category            category              @relation(fields: [category_id], references: [category_id], onDelete: Cascade, map: "category_id")
  Renamedreturn       Renamedreturn[]
  warrantydetail      warrantydetail[]
  order_items         order_item[]
  cart                cart[]

  supplier_id Int?
  supplier    supplier? @relation(fields: [supplier_id], references: [supplier_id], onDelete: Cascade)

  product_entry product_entry[]

  @@index([brand_id], map: "brand_id_idx")
  @@index([category_id], map: "category_id_idx")
  @@index([supplier_id], map: "supplier_id_idx")
}

model product_entry {
  entry_id       Int      @id @default(autoincrement())
  product_id     Int
  supplier_id    Int
  quantity_added Int
  entry_date     DateTime @default(now())
  product        product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  supplier       supplier @relation(fields: [supplier_id], references: [supplier_id], onDelete: Cascade)

  @@index([product_id], map: "product_id_idx")
  @@index([supplier_id], map: "supplier_id_idx")
}

model product_group {
  product_group_id   Int    @id
  product_group_name String @db.VarChar(45)
}

/// This model has been renamed to 'Renamedreturn' during introspection, because the original name 'return' is reserved.
model Renamedreturn {
  return_id   Int      @id
  product_id  Int
  date_return DateTime @db.Date
  reason      String   @db.VarChar(45)
  product     product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "product_id")

  @@index([product_id], map: "product_id_idx")
  @@map("return")
}

model role {
  role_id   String    @id @db.VarChar(45)
  role_name String    @db.VarChar(45)
  account   account[]
}

model supplier {
  supplier_id     Int             @id
  supplier_name   String          @db.VarChar(45)
  address         String          @db.VarChar(45)
  phone_number    String          @db.VarChar(45)
  products        product[]
  product_entries product_entry[]
  goodsreceipt    goodsreceipt[]
}

model warrantydetail {
  warranty_detai_id Int      @id @default(autoincrement())
  product_id        Int
  start_date        DateTime @db.Date
  end_date          DateTime @db.Date
  warranty_date     DateTime @db.Date
  reason            String   @db.VarChar(45)
  warranty_status   String   @db.VarChar(45)

  product product @relation(fields: [product_id], references: [product_id], onDelete: Cascade, map: "fk_warrantydetail_product_id")

  @@index([product_id])
}

enum InvoiceStatus {
  PAID
  PENDING
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceName   String
  total         Int
  status        InvoiceStatus
  date          DateTime
  dueDate       Int
  fromName      String
  fromEmail     String
  formAddress   String
  toName        String
  toEmail       String
  toAddress     String
  currency      String
  invoiceNumber Int
  note          String?

  invoiceItemDesc     String
  invoiceItemQuantity Int
  invoiceItemRate     Int
  accountId           Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  account account? @relation(fields: [accountId], references: [account_id], onDelete: Cascade)
}
